// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i homework/cart/internal/pkg/cart/service/get-cart.ProductService -o product-service-mock.go -n ProductServiceMock -p mock

import (
	"homework/cart/internal/client/api/product/types"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// ProductServiceMock implements mm_get_cart.ProductService
type ProductServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetProduct          func(request types.ProductRequest) (pp1 *types.ProductResponse, err error)
	funcGetProductOrigin    string
	inspectFuncGetProduct   func(request types.ProductRequest)
	afterGetProductCounter  uint64
	beforeGetProductCounter uint64
	GetProductMock          mProductServiceMockGetProduct

	funcGetSkuList          func(request types.SkusRequest) (sp1 *types.SkusResponse, err error)
	funcGetSkuListOrigin    string
	inspectFuncGetSkuList   func(request types.SkusRequest)
	afterGetSkuListCounter  uint64
	beforeGetSkuListCounter uint64
	GetSkuListMock          mProductServiceMockGetSkuList
}

// NewProductServiceMock returns a mock for mm_get_cart.ProductService
func NewProductServiceMock(t minimock.Tester) *ProductServiceMock {
	m := &ProductServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetProductMock = mProductServiceMockGetProduct{mock: m}
	m.GetProductMock.callArgs = []*ProductServiceMockGetProductParams{}

	m.GetSkuListMock = mProductServiceMockGetSkuList{mock: m}
	m.GetSkuListMock.callArgs = []*ProductServiceMockGetSkuListParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mProductServiceMockGetProduct struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetProductExpectation
	expectations       []*ProductServiceMockGetProductExpectation

	callArgs []*ProductServiceMockGetProductParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductServiceMockGetProductExpectation specifies expectation struct of the ProductService.GetProduct
type ProductServiceMockGetProductExpectation struct {
	mock               *ProductServiceMock
	params             *ProductServiceMockGetProductParams
	paramPtrs          *ProductServiceMockGetProductParamPtrs
	expectationOrigins ProductServiceMockGetProductExpectationOrigins
	results            *ProductServiceMockGetProductResults
	returnOrigin       string
	Counter            uint64
}

// ProductServiceMockGetProductParams contains parameters of the ProductService.GetProduct
type ProductServiceMockGetProductParams struct {
	request types.ProductRequest
}

// ProductServiceMockGetProductParamPtrs contains pointers to parameters of the ProductService.GetProduct
type ProductServiceMockGetProductParamPtrs struct {
	request *types.ProductRequest
}

// ProductServiceMockGetProductResults contains results of the ProductService.GetProduct
type ProductServiceMockGetProductResults struct {
	pp1 *types.ProductResponse
	err error
}

// ProductServiceMockGetProductOrigins contains origins of expectations of the ProductService.GetProduct
type ProductServiceMockGetProductExpectationOrigins struct {
	origin        string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetProduct *mProductServiceMockGetProduct) Optional() *mProductServiceMockGetProduct {
	mmGetProduct.optional = true
	return mmGetProduct
}

// Expect sets up expected params for ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Expect(request types.ProductRequest) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.paramPtrs != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by ExpectParams functions")
	}

	mmGetProduct.defaultExpectation.params = &ProductServiceMockGetProductParams{request}
	mmGetProduct.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetProduct.expectations {
		if minimock.Equal(e.params, mmGetProduct.defaultExpectation.params) {
			mmGetProduct.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetProduct.defaultExpectation.params)
		}
	}

	return mmGetProduct
}

// ExpectRequestParam1 sets up expected param request for ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) ExpectRequestParam1(request types.ProductRequest) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{}
	}

	if mmGetProduct.defaultExpectation.params != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Expect")
	}

	if mmGetProduct.defaultExpectation.paramPtrs == nil {
		mmGetProduct.defaultExpectation.paramPtrs = &ProductServiceMockGetProductParamPtrs{}
	}
	mmGetProduct.defaultExpectation.paramPtrs.request = &request
	mmGetProduct.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmGetProduct
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Inspect(f func(request types.ProductRequest)) *mProductServiceMockGetProduct {
	if mmGetProduct.mock.inspectFuncGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetProduct")
	}

	mmGetProduct.mock.inspectFuncGetProduct = f

	return mmGetProduct
}

// Return sets up results that will be returned by ProductService.GetProduct
func (mmGetProduct *mProductServiceMockGetProduct) Return(pp1 *types.ProductResponse, err error) *ProductServiceMock {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	if mmGetProduct.defaultExpectation == nil {
		mmGetProduct.defaultExpectation = &ProductServiceMockGetProductExpectation{mock: mmGetProduct.mock}
	}
	mmGetProduct.defaultExpectation.results = &ProductServiceMockGetProductResults{pp1, err}
	mmGetProduct.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetProduct.mock
}

// Set uses given function f to mock the ProductService.GetProduct method
func (mmGetProduct *mProductServiceMockGetProduct) Set(f func(request types.ProductRequest) (pp1 *types.ProductResponse, err error)) *ProductServiceMock {
	if mmGetProduct.defaultExpectation != nil {
		mmGetProduct.mock.t.Fatalf("Default expectation is already set for the ProductService.GetProduct method")
	}

	if len(mmGetProduct.expectations) > 0 {
		mmGetProduct.mock.t.Fatalf("Some expectations are already set for the ProductService.GetProduct method")
	}

	mmGetProduct.mock.funcGetProduct = f
	mmGetProduct.mock.funcGetProductOrigin = minimock.CallerInfo(1)
	return mmGetProduct.mock
}

// When sets expectation for the ProductService.GetProduct which will trigger the result defined by the following
// Then helper
func (mmGetProduct *mProductServiceMockGetProduct) When(request types.ProductRequest) *ProductServiceMockGetProductExpectation {
	if mmGetProduct.mock.funcGetProduct != nil {
		mmGetProduct.mock.t.Fatalf("ProductServiceMock.GetProduct mock is already set by Set")
	}

	expectation := &ProductServiceMockGetProductExpectation{
		mock:               mmGetProduct.mock,
		params:             &ProductServiceMockGetProductParams{request},
		expectationOrigins: ProductServiceMockGetProductExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetProduct.expectations = append(mmGetProduct.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetProduct return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetProductExpectation) Then(pp1 *types.ProductResponse, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetProductResults{pp1, err}
	return e.mock
}

// Times sets number of times ProductService.GetProduct should be invoked
func (mmGetProduct *mProductServiceMockGetProduct) Times(n uint64) *mProductServiceMockGetProduct {
	if n == 0 {
		mmGetProduct.mock.t.Fatalf("Times of ProductServiceMock.GetProduct mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetProduct.expectedInvocations, n)
	mmGetProduct.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetProduct
}

func (mmGetProduct *mProductServiceMockGetProduct) invocationsDone() bool {
	if len(mmGetProduct.expectations) == 0 && mmGetProduct.defaultExpectation == nil && mmGetProduct.mock.funcGetProduct == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetProduct.mock.afterGetProductCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetProduct.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetProduct implements mm_get_cart.ProductService
func (mmGetProduct *ProductServiceMock) GetProduct(request types.ProductRequest) (pp1 *types.ProductResponse, err error) {
	mm_atomic.AddUint64(&mmGetProduct.beforeGetProductCounter, 1)
	defer mm_atomic.AddUint64(&mmGetProduct.afterGetProductCounter, 1)

	mmGetProduct.t.Helper()

	if mmGetProduct.inspectFuncGetProduct != nil {
		mmGetProduct.inspectFuncGetProduct(request)
	}

	mm_params := ProductServiceMockGetProductParams{request}

	// Record call args
	mmGetProduct.GetProductMock.mutex.Lock()
	mmGetProduct.GetProductMock.callArgs = append(mmGetProduct.GetProductMock.callArgs, &mm_params)
	mmGetProduct.GetProductMock.mutex.Unlock()

	for _, e := range mmGetProduct.GetProductMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.pp1, e.results.err
		}
	}

	if mmGetProduct.GetProductMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetProduct.GetProductMock.defaultExpectation.Counter, 1)
		mm_want := mmGetProduct.GetProductMock.defaultExpectation.params
		mm_want_ptrs := mmGetProduct.GetProductMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetProductParams{request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmGetProduct.t.Errorf("ProductServiceMock.GetProduct got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetProduct.GetProductMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetProduct.t.Errorf("ProductServiceMock.GetProduct got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetProduct.GetProductMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetProduct.GetProductMock.defaultExpectation.results
		if mm_results == nil {
			mmGetProduct.t.Fatal("No results are set for the ProductServiceMock.GetProduct")
		}
		return (*mm_results).pp1, (*mm_results).err
	}
	if mmGetProduct.funcGetProduct != nil {
		return mmGetProduct.funcGetProduct(request)
	}
	mmGetProduct.t.Fatalf("Unexpected call to ProductServiceMock.GetProduct. %v", request)
	return
}

// GetProductAfterCounter returns a count of finished ProductServiceMock.GetProduct invocations
func (mmGetProduct *ProductServiceMock) GetProductAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.afterGetProductCounter)
}

// GetProductBeforeCounter returns a count of ProductServiceMock.GetProduct invocations
func (mmGetProduct *ProductServiceMock) GetProductBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetProduct.beforeGetProductCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetProduct.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetProduct *mProductServiceMockGetProduct) Calls() []*ProductServiceMockGetProductParams {
	mmGetProduct.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetProductParams, len(mmGetProduct.callArgs))
	copy(argCopy, mmGetProduct.callArgs)

	mmGetProduct.mutex.RUnlock()

	return argCopy
}

// MinimockGetProductDone returns true if the count of the GetProduct invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetProductDone() bool {
	if m.GetProductMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetProductMock.invocationsDone()
}

// MinimockGetProductInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetProductInspect() {
	for _, e := range m.GetProductMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetProduct at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetProductCounter := mm_atomic.LoadUint64(&m.afterGetProductCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetProductMock.defaultExpectation != nil && afterGetProductCounter < 1 {
		if m.GetProductMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductServiceMock.GetProduct at\n%s", m.GetProductMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetProduct at\n%s with params: %#v", m.GetProductMock.defaultExpectation.expectationOrigins.origin, *m.GetProductMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetProduct != nil && afterGetProductCounter < 1 {
		m.t.Errorf("Expected call to ProductServiceMock.GetProduct at\n%s", m.funcGetProductOrigin)
	}

	if !m.GetProductMock.invocationsDone() && afterGetProductCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetProduct at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetProductMock.expectedInvocations), m.GetProductMock.expectedInvocationsOrigin, afterGetProductCounter)
	}
}

type mProductServiceMockGetSkuList struct {
	optional           bool
	mock               *ProductServiceMock
	defaultExpectation *ProductServiceMockGetSkuListExpectation
	expectations       []*ProductServiceMockGetSkuListExpectation

	callArgs []*ProductServiceMockGetSkuListParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// ProductServiceMockGetSkuListExpectation specifies expectation struct of the ProductService.GetSkuList
type ProductServiceMockGetSkuListExpectation struct {
	mock               *ProductServiceMock
	params             *ProductServiceMockGetSkuListParams
	paramPtrs          *ProductServiceMockGetSkuListParamPtrs
	expectationOrigins ProductServiceMockGetSkuListExpectationOrigins
	results            *ProductServiceMockGetSkuListResults
	returnOrigin       string
	Counter            uint64
}

// ProductServiceMockGetSkuListParams contains parameters of the ProductService.GetSkuList
type ProductServiceMockGetSkuListParams struct {
	request types.SkusRequest
}

// ProductServiceMockGetSkuListParamPtrs contains pointers to parameters of the ProductService.GetSkuList
type ProductServiceMockGetSkuListParamPtrs struct {
	request *types.SkusRequest
}

// ProductServiceMockGetSkuListResults contains results of the ProductService.GetSkuList
type ProductServiceMockGetSkuListResults struct {
	sp1 *types.SkusResponse
	err error
}

// ProductServiceMockGetSkuListOrigins contains origins of expectations of the ProductService.GetSkuList
type ProductServiceMockGetSkuListExpectationOrigins struct {
	origin        string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetSkuList *mProductServiceMockGetSkuList) Optional() *mProductServiceMockGetSkuList {
	mmGetSkuList.optional = true
	return mmGetSkuList
}

// Expect sets up expected params for ProductService.GetSkuList
func (mmGetSkuList *mProductServiceMockGetSkuList) Expect(request types.SkusRequest) *mProductServiceMockGetSkuList {
	if mmGetSkuList.mock.funcGetSkuList != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by Set")
	}

	if mmGetSkuList.defaultExpectation == nil {
		mmGetSkuList.defaultExpectation = &ProductServiceMockGetSkuListExpectation{}
	}

	if mmGetSkuList.defaultExpectation.paramPtrs != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by ExpectParams functions")
	}

	mmGetSkuList.defaultExpectation.params = &ProductServiceMockGetSkuListParams{request}
	mmGetSkuList.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmGetSkuList.expectations {
		if minimock.Equal(e.params, mmGetSkuList.defaultExpectation.params) {
			mmGetSkuList.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetSkuList.defaultExpectation.params)
		}
	}

	return mmGetSkuList
}

// ExpectRequestParam1 sets up expected param request for ProductService.GetSkuList
func (mmGetSkuList *mProductServiceMockGetSkuList) ExpectRequestParam1(request types.SkusRequest) *mProductServiceMockGetSkuList {
	if mmGetSkuList.mock.funcGetSkuList != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by Set")
	}

	if mmGetSkuList.defaultExpectation == nil {
		mmGetSkuList.defaultExpectation = &ProductServiceMockGetSkuListExpectation{}
	}

	if mmGetSkuList.defaultExpectation.params != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by Expect")
	}

	if mmGetSkuList.defaultExpectation.paramPtrs == nil {
		mmGetSkuList.defaultExpectation.paramPtrs = &ProductServiceMockGetSkuListParamPtrs{}
	}
	mmGetSkuList.defaultExpectation.paramPtrs.request = &request
	mmGetSkuList.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmGetSkuList
}

// Inspect accepts an inspector function that has same arguments as the ProductService.GetSkuList
func (mmGetSkuList *mProductServiceMockGetSkuList) Inspect(f func(request types.SkusRequest)) *mProductServiceMockGetSkuList {
	if mmGetSkuList.mock.inspectFuncGetSkuList != nil {
		mmGetSkuList.mock.t.Fatalf("Inspect function is already set for ProductServiceMock.GetSkuList")
	}

	mmGetSkuList.mock.inspectFuncGetSkuList = f

	return mmGetSkuList
}

// Return sets up results that will be returned by ProductService.GetSkuList
func (mmGetSkuList *mProductServiceMockGetSkuList) Return(sp1 *types.SkusResponse, err error) *ProductServiceMock {
	if mmGetSkuList.mock.funcGetSkuList != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by Set")
	}

	if mmGetSkuList.defaultExpectation == nil {
		mmGetSkuList.defaultExpectation = &ProductServiceMockGetSkuListExpectation{mock: mmGetSkuList.mock}
	}
	mmGetSkuList.defaultExpectation.results = &ProductServiceMockGetSkuListResults{sp1, err}
	mmGetSkuList.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmGetSkuList.mock
}

// Set uses given function f to mock the ProductService.GetSkuList method
func (mmGetSkuList *mProductServiceMockGetSkuList) Set(f func(request types.SkusRequest) (sp1 *types.SkusResponse, err error)) *ProductServiceMock {
	if mmGetSkuList.defaultExpectation != nil {
		mmGetSkuList.mock.t.Fatalf("Default expectation is already set for the ProductService.GetSkuList method")
	}

	if len(mmGetSkuList.expectations) > 0 {
		mmGetSkuList.mock.t.Fatalf("Some expectations are already set for the ProductService.GetSkuList method")
	}

	mmGetSkuList.mock.funcGetSkuList = f
	mmGetSkuList.mock.funcGetSkuListOrigin = minimock.CallerInfo(1)
	return mmGetSkuList.mock
}

// When sets expectation for the ProductService.GetSkuList which will trigger the result defined by the following
// Then helper
func (mmGetSkuList *mProductServiceMockGetSkuList) When(request types.SkusRequest) *ProductServiceMockGetSkuListExpectation {
	if mmGetSkuList.mock.funcGetSkuList != nil {
		mmGetSkuList.mock.t.Fatalf("ProductServiceMock.GetSkuList mock is already set by Set")
	}

	expectation := &ProductServiceMockGetSkuListExpectation{
		mock:               mmGetSkuList.mock,
		params:             &ProductServiceMockGetSkuListParams{request},
		expectationOrigins: ProductServiceMockGetSkuListExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmGetSkuList.expectations = append(mmGetSkuList.expectations, expectation)
	return expectation
}

// Then sets up ProductService.GetSkuList return parameters for the expectation previously defined by the When method
func (e *ProductServiceMockGetSkuListExpectation) Then(sp1 *types.SkusResponse, err error) *ProductServiceMock {
	e.results = &ProductServiceMockGetSkuListResults{sp1, err}
	return e.mock
}

// Times sets number of times ProductService.GetSkuList should be invoked
func (mmGetSkuList *mProductServiceMockGetSkuList) Times(n uint64) *mProductServiceMockGetSkuList {
	if n == 0 {
		mmGetSkuList.mock.t.Fatalf("Times of ProductServiceMock.GetSkuList mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetSkuList.expectedInvocations, n)
	mmGetSkuList.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmGetSkuList
}

func (mmGetSkuList *mProductServiceMockGetSkuList) invocationsDone() bool {
	if len(mmGetSkuList.expectations) == 0 && mmGetSkuList.defaultExpectation == nil && mmGetSkuList.mock.funcGetSkuList == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetSkuList.mock.afterGetSkuListCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetSkuList.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetSkuList implements mm_get_cart.ProductService
func (mmGetSkuList *ProductServiceMock) GetSkuList(request types.SkusRequest) (sp1 *types.SkusResponse, err error) {
	mm_atomic.AddUint64(&mmGetSkuList.beforeGetSkuListCounter, 1)
	defer mm_atomic.AddUint64(&mmGetSkuList.afterGetSkuListCounter, 1)

	mmGetSkuList.t.Helper()

	if mmGetSkuList.inspectFuncGetSkuList != nil {
		mmGetSkuList.inspectFuncGetSkuList(request)
	}

	mm_params := ProductServiceMockGetSkuListParams{request}

	// Record call args
	mmGetSkuList.GetSkuListMock.mutex.Lock()
	mmGetSkuList.GetSkuListMock.callArgs = append(mmGetSkuList.GetSkuListMock.callArgs, &mm_params)
	mmGetSkuList.GetSkuListMock.mutex.Unlock()

	for _, e := range mmGetSkuList.GetSkuListMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmGetSkuList.GetSkuListMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetSkuList.GetSkuListMock.defaultExpectation.Counter, 1)
		mm_want := mmGetSkuList.GetSkuListMock.defaultExpectation.params
		mm_want_ptrs := mmGetSkuList.GetSkuListMock.defaultExpectation.paramPtrs

		mm_got := ProductServiceMockGetSkuListParams{request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmGetSkuList.t.Errorf("ProductServiceMock.GetSkuList got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmGetSkuList.GetSkuListMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetSkuList.t.Errorf("ProductServiceMock.GetSkuList got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmGetSkuList.GetSkuListMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetSkuList.GetSkuListMock.defaultExpectation.results
		if mm_results == nil {
			mmGetSkuList.t.Fatal("No results are set for the ProductServiceMock.GetSkuList")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmGetSkuList.funcGetSkuList != nil {
		return mmGetSkuList.funcGetSkuList(request)
	}
	mmGetSkuList.t.Fatalf("Unexpected call to ProductServiceMock.GetSkuList. %v", request)
	return
}

// GetSkuListAfterCounter returns a count of finished ProductServiceMock.GetSkuList invocations
func (mmGetSkuList *ProductServiceMock) GetSkuListAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSkuList.afterGetSkuListCounter)
}

// GetSkuListBeforeCounter returns a count of ProductServiceMock.GetSkuList invocations
func (mmGetSkuList *ProductServiceMock) GetSkuListBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetSkuList.beforeGetSkuListCounter)
}

// Calls returns a list of arguments used in each call to ProductServiceMock.GetSkuList.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetSkuList *mProductServiceMockGetSkuList) Calls() []*ProductServiceMockGetSkuListParams {
	mmGetSkuList.mutex.RLock()

	argCopy := make([]*ProductServiceMockGetSkuListParams, len(mmGetSkuList.callArgs))
	copy(argCopy, mmGetSkuList.callArgs)

	mmGetSkuList.mutex.RUnlock()

	return argCopy
}

// MinimockGetSkuListDone returns true if the count of the GetSkuList invocations corresponds
// the number of defined expectations
func (m *ProductServiceMock) MinimockGetSkuListDone() bool {
	if m.GetSkuListMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetSkuListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetSkuListMock.invocationsDone()
}

// MinimockGetSkuListInspect logs each unmet expectation
func (m *ProductServiceMock) MinimockGetSkuListInspect() {
	for _, e := range m.GetSkuListMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to ProductServiceMock.GetSkuList at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterGetSkuListCounter := mm_atomic.LoadUint64(&m.afterGetSkuListCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetSkuListMock.defaultExpectation != nil && afterGetSkuListCounter < 1 {
		if m.GetSkuListMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to ProductServiceMock.GetSkuList at\n%s", m.GetSkuListMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to ProductServiceMock.GetSkuList at\n%s with params: %#v", m.GetSkuListMock.defaultExpectation.expectationOrigins.origin, *m.GetSkuListMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetSkuList != nil && afterGetSkuListCounter < 1 {
		m.t.Errorf("Expected call to ProductServiceMock.GetSkuList at\n%s", m.funcGetSkuListOrigin)
	}

	if !m.GetSkuListMock.invocationsDone() && afterGetSkuListCounter > 0 {
		m.t.Errorf("Expected %d calls to ProductServiceMock.GetSkuList at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.GetSkuListMock.expectedInvocations), m.GetSkuListMock.expectedInvocationsOrigin, afterGetSkuListCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *ProductServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetProductInspect()

			m.MinimockGetSkuListInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *ProductServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *ProductServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetProductDone() &&
		m.MinimockGetSkuListDone()
}
