// Code generated by http://github.com/gojuno/minimock (v3.4.0). DO NOT EDIT.

package mock

//go:generate minimock -i homework/cart/internal/pkg/cart/service/cart-checkout.LomsService -o loms-service-mock.go -n LomsServiceMock -p mock

import (
	"homework/cart/internal/client/api/loms/types"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// LomsServiceMock implements mm_cart_checkout.LomsService
type LomsServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateOrder          func(request types.OrderCreateRequest) (op1 *types.OrderCreateResponse, err error)
	funcCreateOrderOrigin    string
	inspectFuncCreateOrder   func(request types.OrderCreateRequest)
	afterCreateOrderCounter  uint64
	beforeCreateOrderCounter uint64
	CreateOrderMock          mLomsServiceMockCreateOrder

	funcStocksInfo          func(request types.StocksInfoRequest) (sp1 *types.StocksInfoResponse, err error)
	funcStocksInfoOrigin    string
	inspectFuncStocksInfo   func(request types.StocksInfoRequest)
	afterStocksInfoCounter  uint64
	beforeStocksInfoCounter uint64
	StocksInfoMock          mLomsServiceMockStocksInfo
}

// NewLomsServiceMock returns a mock for mm_cart_checkout.LomsService
func NewLomsServiceMock(t minimock.Tester) *LomsServiceMock {
	m := &LomsServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateOrderMock = mLomsServiceMockCreateOrder{mock: m}
	m.CreateOrderMock.callArgs = []*LomsServiceMockCreateOrderParams{}

	m.StocksInfoMock = mLomsServiceMockStocksInfo{mock: m}
	m.StocksInfoMock.callArgs = []*LomsServiceMockStocksInfoParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLomsServiceMockCreateOrder struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockCreateOrderExpectation
	expectations       []*LomsServiceMockCreateOrderExpectation

	callArgs []*LomsServiceMockCreateOrderParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceMockCreateOrderExpectation specifies expectation struct of the LomsService.CreateOrder
type LomsServiceMockCreateOrderExpectation struct {
	mock               *LomsServiceMock
	params             *LomsServiceMockCreateOrderParams
	paramPtrs          *LomsServiceMockCreateOrderParamPtrs
	expectationOrigins LomsServiceMockCreateOrderExpectationOrigins
	results            *LomsServiceMockCreateOrderResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceMockCreateOrderParams contains parameters of the LomsService.CreateOrder
type LomsServiceMockCreateOrderParams struct {
	request types.OrderCreateRequest
}

// LomsServiceMockCreateOrderParamPtrs contains pointers to parameters of the LomsService.CreateOrder
type LomsServiceMockCreateOrderParamPtrs struct {
	request *types.OrderCreateRequest
}

// LomsServiceMockCreateOrderResults contains results of the LomsService.CreateOrder
type LomsServiceMockCreateOrderResults struct {
	op1 *types.OrderCreateResponse
	err error
}

// LomsServiceMockCreateOrderOrigins contains origins of expectations of the LomsService.CreateOrder
type LomsServiceMockCreateOrderExpectationOrigins struct {
	origin        string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateOrder *mLomsServiceMockCreateOrder) Optional() *mLomsServiceMockCreateOrder {
	mmCreateOrder.optional = true
	return mmCreateOrder
}

// Expect sets up expected params for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Expect(request types.OrderCreateRequest) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.paramPtrs != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by ExpectParams functions")
	}

	mmCreateOrder.defaultExpectation.params = &LomsServiceMockCreateOrderParams{request}
	mmCreateOrder.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmCreateOrder.expectations {
		if minimock.Equal(e.params, mmCreateOrder.defaultExpectation.params) {
			mmCreateOrder.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateOrder.defaultExpectation.params)
		}
	}

	return mmCreateOrder
}

// ExpectRequestParam1 sets up expected param request for LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) ExpectRequestParam1(request types.OrderCreateRequest) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{}
	}

	if mmCreateOrder.defaultExpectation.params != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Expect")
	}

	if mmCreateOrder.defaultExpectation.paramPtrs == nil {
		mmCreateOrder.defaultExpectation.paramPtrs = &LomsServiceMockCreateOrderParamPtrs{}
	}
	mmCreateOrder.defaultExpectation.paramPtrs.request = &request
	mmCreateOrder.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmCreateOrder
}

// Inspect accepts an inspector function that has same arguments as the LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Inspect(f func(request types.OrderCreateRequest)) *mLomsServiceMockCreateOrder {
	if mmCreateOrder.mock.inspectFuncCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.CreateOrder")
	}

	mmCreateOrder.mock.inspectFuncCreateOrder = f

	return mmCreateOrder
}

// Return sets up results that will be returned by LomsService.CreateOrder
func (mmCreateOrder *mLomsServiceMockCreateOrder) Return(op1 *types.OrderCreateResponse, err error) *LomsServiceMock {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	if mmCreateOrder.defaultExpectation == nil {
		mmCreateOrder.defaultExpectation = &LomsServiceMockCreateOrderExpectation{mock: mmCreateOrder.mock}
	}
	mmCreateOrder.defaultExpectation.results = &LomsServiceMockCreateOrderResults{op1, err}
	mmCreateOrder.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// Set uses given function f to mock the LomsService.CreateOrder method
func (mmCreateOrder *mLomsServiceMockCreateOrder) Set(f func(request types.OrderCreateRequest) (op1 *types.OrderCreateResponse, err error)) *LomsServiceMock {
	if mmCreateOrder.defaultExpectation != nil {
		mmCreateOrder.mock.t.Fatalf("Default expectation is already set for the LomsService.CreateOrder method")
	}

	if len(mmCreateOrder.expectations) > 0 {
		mmCreateOrder.mock.t.Fatalf("Some expectations are already set for the LomsService.CreateOrder method")
	}

	mmCreateOrder.mock.funcCreateOrder = f
	mmCreateOrder.mock.funcCreateOrderOrigin = minimock.CallerInfo(1)
	return mmCreateOrder.mock
}

// When sets expectation for the LomsService.CreateOrder which will trigger the result defined by the following
// Then helper
func (mmCreateOrder *mLomsServiceMockCreateOrder) When(request types.OrderCreateRequest) *LomsServiceMockCreateOrderExpectation {
	if mmCreateOrder.mock.funcCreateOrder != nil {
		mmCreateOrder.mock.t.Fatalf("LomsServiceMock.CreateOrder mock is already set by Set")
	}

	expectation := &LomsServiceMockCreateOrderExpectation{
		mock:               mmCreateOrder.mock,
		params:             &LomsServiceMockCreateOrderParams{request},
		expectationOrigins: LomsServiceMockCreateOrderExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmCreateOrder.expectations = append(mmCreateOrder.expectations, expectation)
	return expectation
}

// Then sets up LomsService.CreateOrder return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockCreateOrderExpectation) Then(op1 *types.OrderCreateResponse, err error) *LomsServiceMock {
	e.results = &LomsServiceMockCreateOrderResults{op1, err}
	return e.mock
}

// Times sets number of times LomsService.CreateOrder should be invoked
func (mmCreateOrder *mLomsServiceMockCreateOrder) Times(n uint64) *mLomsServiceMockCreateOrder {
	if n == 0 {
		mmCreateOrder.mock.t.Fatalf("Times of LomsServiceMock.CreateOrder mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateOrder.expectedInvocations, n)
	mmCreateOrder.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmCreateOrder
}

func (mmCreateOrder *mLomsServiceMockCreateOrder) invocationsDone() bool {
	if len(mmCreateOrder.expectations) == 0 && mmCreateOrder.defaultExpectation == nil && mmCreateOrder.mock.funcCreateOrder == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateOrder.mock.afterCreateOrderCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateOrder.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateOrder implements mm_cart_checkout.LomsService
func (mmCreateOrder *LomsServiceMock) CreateOrder(request types.OrderCreateRequest) (op1 *types.OrderCreateResponse, err error) {
	mm_atomic.AddUint64(&mmCreateOrder.beforeCreateOrderCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateOrder.afterCreateOrderCounter, 1)

	mmCreateOrder.t.Helper()

	if mmCreateOrder.inspectFuncCreateOrder != nil {
		mmCreateOrder.inspectFuncCreateOrder(request)
	}

	mm_params := LomsServiceMockCreateOrderParams{request}

	// Record call args
	mmCreateOrder.CreateOrderMock.mutex.Lock()
	mmCreateOrder.CreateOrderMock.callArgs = append(mmCreateOrder.CreateOrderMock.callArgs, &mm_params)
	mmCreateOrder.CreateOrderMock.mutex.Unlock()

	for _, e := range mmCreateOrder.CreateOrderMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.op1, e.results.err
		}
	}

	if mmCreateOrder.CreateOrderMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateOrder.CreateOrderMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateOrder.CreateOrderMock.defaultExpectation.params
		mm_want_ptrs := mmCreateOrder.CreateOrderMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockCreateOrderParams{request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateOrder.t.Errorf("LomsServiceMock.CreateOrder got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmCreateOrder.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateOrder.CreateOrderMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateOrder.t.Fatal("No results are set for the LomsServiceMock.CreateOrder")
		}
		return (*mm_results).op1, (*mm_results).err
	}
	if mmCreateOrder.funcCreateOrder != nil {
		return mmCreateOrder.funcCreateOrder(request)
	}
	mmCreateOrder.t.Fatalf("Unexpected call to LomsServiceMock.CreateOrder. %v", request)
	return
}

// CreateOrderAfterCounter returns a count of finished LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.afterCreateOrderCounter)
}

// CreateOrderBeforeCounter returns a count of LomsServiceMock.CreateOrder invocations
func (mmCreateOrder *LomsServiceMock) CreateOrderBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateOrder.beforeCreateOrderCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.CreateOrder.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateOrder *mLomsServiceMockCreateOrder) Calls() []*LomsServiceMockCreateOrderParams {
	mmCreateOrder.mutex.RLock()

	argCopy := make([]*LomsServiceMockCreateOrderParams, len(mmCreateOrder.callArgs))
	copy(argCopy, mmCreateOrder.callArgs)

	mmCreateOrder.mutex.RUnlock()

	return argCopy
}

// MinimockCreateOrderDone returns true if the count of the CreateOrder invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockCreateOrderDone() bool {
	if m.CreateOrderMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateOrderMock.invocationsDone()
}

// MinimockCreateOrderInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockCreateOrderInspect() {
	for _, e := range m.CreateOrderMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterCreateOrderCounter := mm_atomic.LoadUint64(&m.afterCreateOrderCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateOrderMock.defaultExpectation != nil && afterCreateOrderCounter < 1 {
		if m.CreateOrderMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s", m.CreateOrderMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s with params: %#v", m.CreateOrderMock.defaultExpectation.expectationOrigins.origin, *m.CreateOrderMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateOrder != nil && afterCreateOrderCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceMock.CreateOrder at\n%s", m.funcCreateOrderOrigin)
	}

	if !m.CreateOrderMock.invocationsDone() && afterCreateOrderCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.CreateOrder at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.CreateOrderMock.expectedInvocations), m.CreateOrderMock.expectedInvocationsOrigin, afterCreateOrderCounter)
	}
}

type mLomsServiceMockStocksInfo struct {
	optional           bool
	mock               *LomsServiceMock
	defaultExpectation *LomsServiceMockStocksInfoExpectation
	expectations       []*LomsServiceMockStocksInfoExpectation

	callArgs []*LomsServiceMockStocksInfoParams
	mutex    sync.RWMutex

	expectedInvocations       uint64
	expectedInvocationsOrigin string
}

// LomsServiceMockStocksInfoExpectation specifies expectation struct of the LomsService.StocksInfo
type LomsServiceMockStocksInfoExpectation struct {
	mock               *LomsServiceMock
	params             *LomsServiceMockStocksInfoParams
	paramPtrs          *LomsServiceMockStocksInfoParamPtrs
	expectationOrigins LomsServiceMockStocksInfoExpectationOrigins
	results            *LomsServiceMockStocksInfoResults
	returnOrigin       string
	Counter            uint64
}

// LomsServiceMockStocksInfoParams contains parameters of the LomsService.StocksInfo
type LomsServiceMockStocksInfoParams struct {
	request types.StocksInfoRequest
}

// LomsServiceMockStocksInfoParamPtrs contains pointers to parameters of the LomsService.StocksInfo
type LomsServiceMockStocksInfoParamPtrs struct {
	request *types.StocksInfoRequest
}

// LomsServiceMockStocksInfoResults contains results of the LomsService.StocksInfo
type LomsServiceMockStocksInfoResults struct {
	sp1 *types.StocksInfoResponse
	err error
}

// LomsServiceMockStocksInfoOrigins contains origins of expectations of the LomsService.StocksInfo
type LomsServiceMockStocksInfoExpectationOrigins struct {
	origin        string
	originRequest string
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmStocksInfo *mLomsServiceMockStocksInfo) Optional() *mLomsServiceMockStocksInfo {
	mmStocksInfo.optional = true
	return mmStocksInfo
}

// Expect sets up expected params for LomsService.StocksInfo
func (mmStocksInfo *mLomsServiceMockStocksInfo) Expect(request types.StocksInfoRequest) *mLomsServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.paramPtrs != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by ExpectParams functions")
	}

	mmStocksInfo.defaultExpectation.params = &LomsServiceMockStocksInfoParams{request}
	mmStocksInfo.defaultExpectation.expectationOrigins.origin = minimock.CallerInfo(1)
	for _, e := range mmStocksInfo.expectations {
		if minimock.Equal(e.params, mmStocksInfo.defaultExpectation.params) {
			mmStocksInfo.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmStocksInfo.defaultExpectation.params)
		}
	}

	return mmStocksInfo
}

// ExpectRequestParam1 sets up expected param request for LomsService.StocksInfo
func (mmStocksInfo *mLomsServiceMockStocksInfo) ExpectRequestParam1(request types.StocksInfoRequest) *mLomsServiceMockStocksInfo {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceMockStocksInfoExpectation{}
	}

	if mmStocksInfo.defaultExpectation.params != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by Expect")
	}

	if mmStocksInfo.defaultExpectation.paramPtrs == nil {
		mmStocksInfo.defaultExpectation.paramPtrs = &LomsServiceMockStocksInfoParamPtrs{}
	}
	mmStocksInfo.defaultExpectation.paramPtrs.request = &request
	mmStocksInfo.defaultExpectation.expectationOrigins.originRequest = minimock.CallerInfo(1)

	return mmStocksInfo
}

// Inspect accepts an inspector function that has same arguments as the LomsService.StocksInfo
func (mmStocksInfo *mLomsServiceMockStocksInfo) Inspect(f func(request types.StocksInfoRequest)) *mLomsServiceMockStocksInfo {
	if mmStocksInfo.mock.inspectFuncStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("Inspect function is already set for LomsServiceMock.StocksInfo")
	}

	mmStocksInfo.mock.inspectFuncStocksInfo = f

	return mmStocksInfo
}

// Return sets up results that will be returned by LomsService.StocksInfo
func (mmStocksInfo *mLomsServiceMockStocksInfo) Return(sp1 *types.StocksInfoResponse, err error) *LomsServiceMock {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by Set")
	}

	if mmStocksInfo.defaultExpectation == nil {
		mmStocksInfo.defaultExpectation = &LomsServiceMockStocksInfoExpectation{mock: mmStocksInfo.mock}
	}
	mmStocksInfo.defaultExpectation.results = &LomsServiceMockStocksInfoResults{sp1, err}
	mmStocksInfo.defaultExpectation.returnOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// Set uses given function f to mock the LomsService.StocksInfo method
func (mmStocksInfo *mLomsServiceMockStocksInfo) Set(f func(request types.StocksInfoRequest) (sp1 *types.StocksInfoResponse, err error)) *LomsServiceMock {
	if mmStocksInfo.defaultExpectation != nil {
		mmStocksInfo.mock.t.Fatalf("Default expectation is already set for the LomsService.StocksInfo method")
	}

	if len(mmStocksInfo.expectations) > 0 {
		mmStocksInfo.mock.t.Fatalf("Some expectations are already set for the LomsService.StocksInfo method")
	}

	mmStocksInfo.mock.funcStocksInfo = f
	mmStocksInfo.mock.funcStocksInfoOrigin = minimock.CallerInfo(1)
	return mmStocksInfo.mock
}

// When sets expectation for the LomsService.StocksInfo which will trigger the result defined by the following
// Then helper
func (mmStocksInfo *mLomsServiceMockStocksInfo) When(request types.StocksInfoRequest) *LomsServiceMockStocksInfoExpectation {
	if mmStocksInfo.mock.funcStocksInfo != nil {
		mmStocksInfo.mock.t.Fatalf("LomsServiceMock.StocksInfo mock is already set by Set")
	}

	expectation := &LomsServiceMockStocksInfoExpectation{
		mock:               mmStocksInfo.mock,
		params:             &LomsServiceMockStocksInfoParams{request},
		expectationOrigins: LomsServiceMockStocksInfoExpectationOrigins{origin: minimock.CallerInfo(1)},
	}
	mmStocksInfo.expectations = append(mmStocksInfo.expectations, expectation)
	return expectation
}

// Then sets up LomsService.StocksInfo return parameters for the expectation previously defined by the When method
func (e *LomsServiceMockStocksInfoExpectation) Then(sp1 *types.StocksInfoResponse, err error) *LomsServiceMock {
	e.results = &LomsServiceMockStocksInfoResults{sp1, err}
	return e.mock
}

// Times sets number of times LomsService.StocksInfo should be invoked
func (mmStocksInfo *mLomsServiceMockStocksInfo) Times(n uint64) *mLomsServiceMockStocksInfo {
	if n == 0 {
		mmStocksInfo.mock.t.Fatalf("Times of LomsServiceMock.StocksInfo mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmStocksInfo.expectedInvocations, n)
	mmStocksInfo.expectedInvocationsOrigin = minimock.CallerInfo(1)
	return mmStocksInfo
}

func (mmStocksInfo *mLomsServiceMockStocksInfo) invocationsDone() bool {
	if len(mmStocksInfo.expectations) == 0 && mmStocksInfo.defaultExpectation == nil && mmStocksInfo.mock.funcStocksInfo == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmStocksInfo.mock.afterStocksInfoCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmStocksInfo.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// StocksInfo implements mm_cart_checkout.LomsService
func (mmStocksInfo *LomsServiceMock) StocksInfo(request types.StocksInfoRequest) (sp1 *types.StocksInfoResponse, err error) {
	mm_atomic.AddUint64(&mmStocksInfo.beforeStocksInfoCounter, 1)
	defer mm_atomic.AddUint64(&mmStocksInfo.afterStocksInfoCounter, 1)

	mmStocksInfo.t.Helper()

	if mmStocksInfo.inspectFuncStocksInfo != nil {
		mmStocksInfo.inspectFuncStocksInfo(request)
	}

	mm_params := LomsServiceMockStocksInfoParams{request}

	// Record call args
	mmStocksInfo.StocksInfoMock.mutex.Lock()
	mmStocksInfo.StocksInfoMock.callArgs = append(mmStocksInfo.StocksInfoMock.callArgs, &mm_params)
	mmStocksInfo.StocksInfoMock.mutex.Unlock()

	for _, e := range mmStocksInfo.StocksInfoMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.sp1, e.results.err
		}
	}

	if mmStocksInfo.StocksInfoMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmStocksInfo.StocksInfoMock.defaultExpectation.Counter, 1)
		mm_want := mmStocksInfo.StocksInfoMock.defaultExpectation.params
		mm_want_ptrs := mmStocksInfo.StocksInfoMock.defaultExpectation.paramPtrs

		mm_got := LomsServiceMockStocksInfoParams{request}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.request != nil && !minimock.Equal(*mm_want_ptrs.request, mm_got.request) {
				mmStocksInfo.t.Errorf("LomsServiceMock.StocksInfo got unexpected parameter request, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
					mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.originRequest, *mm_want_ptrs.request, mm_got.request, minimock.Diff(*mm_want_ptrs.request, mm_got.request))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmStocksInfo.t.Errorf("LomsServiceMock.StocksInfo got unexpected parameters, expected at\n%s:\nwant: %#v\n got: %#v%s\n",
				mmStocksInfo.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmStocksInfo.StocksInfoMock.defaultExpectation.results
		if mm_results == nil {
			mmStocksInfo.t.Fatal("No results are set for the LomsServiceMock.StocksInfo")
		}
		return (*mm_results).sp1, (*mm_results).err
	}
	if mmStocksInfo.funcStocksInfo != nil {
		return mmStocksInfo.funcStocksInfo(request)
	}
	mmStocksInfo.t.Fatalf("Unexpected call to LomsServiceMock.StocksInfo. %v", request)
	return
}

// StocksInfoAfterCounter returns a count of finished LomsServiceMock.StocksInfo invocations
func (mmStocksInfo *LomsServiceMock) StocksInfoAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.afterStocksInfoCounter)
}

// StocksInfoBeforeCounter returns a count of LomsServiceMock.StocksInfo invocations
func (mmStocksInfo *LomsServiceMock) StocksInfoBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmStocksInfo.beforeStocksInfoCounter)
}

// Calls returns a list of arguments used in each call to LomsServiceMock.StocksInfo.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmStocksInfo *mLomsServiceMockStocksInfo) Calls() []*LomsServiceMockStocksInfoParams {
	mmStocksInfo.mutex.RLock()

	argCopy := make([]*LomsServiceMockStocksInfoParams, len(mmStocksInfo.callArgs))
	copy(argCopy, mmStocksInfo.callArgs)

	mmStocksInfo.mutex.RUnlock()

	return argCopy
}

// MinimockStocksInfoDone returns true if the count of the StocksInfo invocations corresponds
// the number of defined expectations
func (m *LomsServiceMock) MinimockStocksInfoDone() bool {
	if m.StocksInfoMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.StocksInfoMock.invocationsDone()
}

// MinimockStocksInfoInspect logs each unmet expectation
func (m *LomsServiceMock) MinimockStocksInfoInspect() {
	for _, e := range m.StocksInfoMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LomsServiceMock.StocksInfo at\n%s with params: %#v", e.expectationOrigins.origin, *e.params)
		}
	}

	afterStocksInfoCounter := mm_atomic.LoadUint64(&m.afterStocksInfoCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.StocksInfoMock.defaultExpectation != nil && afterStocksInfoCounter < 1 {
		if m.StocksInfoMock.defaultExpectation.params == nil {
			m.t.Errorf("Expected call to LomsServiceMock.StocksInfo at\n%s", m.StocksInfoMock.defaultExpectation.returnOrigin)
		} else {
			m.t.Errorf("Expected call to LomsServiceMock.StocksInfo at\n%s with params: %#v", m.StocksInfoMock.defaultExpectation.expectationOrigins.origin, *m.StocksInfoMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcStocksInfo != nil && afterStocksInfoCounter < 1 {
		m.t.Errorf("Expected call to LomsServiceMock.StocksInfo at\n%s", m.funcStocksInfoOrigin)
	}

	if !m.StocksInfoMock.invocationsDone() && afterStocksInfoCounter > 0 {
		m.t.Errorf("Expected %d calls to LomsServiceMock.StocksInfo at\n%s but found %d calls",
			mm_atomic.LoadUint64(&m.StocksInfoMock.expectedInvocations), m.StocksInfoMock.expectedInvocationsOrigin, afterStocksInfoCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LomsServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateOrderInspect()

			m.MinimockStocksInfoInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LomsServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LomsServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateOrderDone() &&
		m.MinimockStocksInfoDone()
}
